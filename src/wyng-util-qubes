#!/usr/bin/env python3
# editor width: 100   -----------------------------------------------------------------------------

###  wyng-util-qubes
###  Copyright Christopher Laprise 2025 / tasket@protonmail.com
###  Licensed under GNU General Public License v3. See file 'LICENSE'.

_program = "wyng-util-qubes v0.9 beta rel 20250222"

import qubesadmin, sys, os, shutil, subprocess, argparse, json, tempfile
import time, datetime
from qubesadmin.backup.core3 import Core3Qubes
from subprocess import CalledProcessError

exists  = os.path.exists

def b2i(b):   return int.from_bytes(b, byteorder="big")

def err_out(text):   sys.stderr.write(text+"\n")

# Exit with simple message
def x_it(code, text=""):
    if text:        err_out(text)
    if __name__ == "__main__":
        sys.exit(code)
    elif code > 0:
        raise RuntimeError(f"Exit code {code}: {text}")


class QubesPool:
    def __init__(self, qobj, path):
        self.name = qobj.name    ; self.driver = qobj.driver    ; self.config = qobj.config
        self.path = path         ; self.qobj   = qobj


# Get Qubes storage pools
def get_pools(qadmin):
    pools = {}
    for qpool in qadmin.pools.values():
        if qpool.driver == "lvm_thin":
            path = (qpool.config['volume_group'], qpool.config['thin_pool'])
        elif qpool.driver == "file-reflink":
            path = (qpool.config["dir_path"], )
        else:
            continue
        pools[qpool.name] = QubesPool(qpool, path)
    return pools



# Get archive directory
def get_wyng_directory(ctx, stdin=None, passphrase=None):

    # Parse full vol/session list into lookup tables...

    # wvolsessionmap:  (dict)session -> (set)arch_vol_names
    # wsessionqubes :  (dict)session -> (set)qube_names
    # wsessiontags  :  (dict)session -> (dict)tags
    # wtagsession   :  (dict)(tagid,text) -> (set)sessions
    # wvolumemap    :  (dict)arch_vol_name -> (list)sessions
    # qube_wvolmap  :  (dict)qube_name -> (dict)session -> (set)arch_vol_name
    # q_wpriv_wrootmap: (dict)qube_name -> (dict)session -> (dict)voltype -> arch_vol_name

    wvolsessionmap, wvolumemap, qube_wvolmap, q_wpriv_wrootmap = {}, {}, {}, {}
    wvolqubemap, wsessionqubes, wsessiontags, wtagsession = {}, {}, {}, {}
    volname  = qubename = None

    wyng_cmd = ctx.w_options[:]    ; run_opts = {"env": os.environ.copy()}
    if passphrase:
        assert type(passphrase) is str
        wyng_cmd.append("--passcmd=echo $WYNGPASS")
        run_opts["env"]["WYNGPASS"] = passphrase

    res = run(wyng_cmd + ["--json", "list"], stdin=stdin or subprocess.DEVNULL,
              check=False, **run_opts)
    if res.returncode:   handle_wyng_error(ctx, res)

    jdata = json.loads((j:= res.stdout)[j.find("{"):])

    if jdata["wversion"][:3] != "0.8" \
    or "wdate" not in jdata or jdata["wdate"] < "20250215":
        x_it(1, "Wyng v0.8 release 20250215 or later is required.")

    for volname, sname, ses in ((vk, sk[2:], sv) for vk, vv in jdata["volumes"].items()
                                for sk, sv in vv["sessions"].items()):
        wvolumemap.setdefault(volname, list()).append(sname)
        wvolsessionmap.setdefault(sname, set()).add(volname)
        wsessiontags.setdefault(sname, {}).update(ses["tags"])
        #for tag, cmnt in ses["tags"].items():
        #    wtagsession.setdefault((tag,cmnt), set()).add(sname)

    for sname, vols in wvolsessionmap.items():
        if s := set(get_qubename_parts(x)[1] for x in vols
                    if x.endswith(("-root","-private","/root.img","/private.img"))
                    and mvolname in wvolsessionmap[sname]):
            wsessionqubes[sname] = s

    # make qube_wvolmap...
    for vol, sname in ((x,s) for x,y in wvolumemap.items() for s in y
                     if x.startswith(("vm-","appvms/","vm-templates/"))):
        prefix, qubename, suffix = get_qubename_parts(vol)
        qube_wvolmap.setdefault(qubename, dict()).setdefault(sname, set()).add(vol)
        if vol.endswith(("-root","/root.img")):
            voltype = "root"
        elif vol.endswith(("-private","/private.img")):
            voltype = "private"
        else:
            continue
        q_wpriv_wrootmap.setdefault(qubename, {}).setdefault(sname,{})[voltype] = vol
        wvolqubemap[vol] = qubename

    return jdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
           qube_wvolmap, q_wpriv_wrootmap


def get_vm_volname(vm, voltype="private"):
    assert voltype in ("private","root")
    vol = vm.volumes[voltype]
    pt  = vol.app.pools[vol.pool].driver    ; template = vm.klass == "TemplateVM"

    if pt == "file-reflink":
        vname = vm.volumes[voltype].vid + ".img"
    elif pt == "lvm_thin":
        vname = f"vm-{vm.name}-{voltype}"

    return vname, pt


def get_qubename_parts(n):
    if n.startswith("vm-") and n.endswith(("-root","-private")):
        return ["vm"] + n.partition("vm-")[-1].rsplit("-",maxsplit=1)
    elif n.startswith(("appvms/","vm-templates/")) and n.endswith(("/root.img","/private.img")):
        return ((t := n.split("/"))[0], "/".join(t[1:-1]), t[-1])
    else:
        return "","",""


def convert_volname(n, to_pooltype, template, invert=False):
    p = get_qubename_parts(n)
    to_pooltype = pooltypes[(to_pooltype == "lvm_thin") ^ invert]
    if to_pooltype == "file-reflink":
        assert n.startswith("vm-")
        n = f'{"vm-templates" if template else "appvms"}/{p[1]}/{p[2].removesuffix(".img")}.img'
    elif to_pooltype == "lvm_thin":
        assert n.startswith("vm-templates") or not template
        n = f'vm-{p[1]}-{p[2].removesuffix(".img")}'
    return (n, template, to_pooltype)


def list_sessions(slist):
    rows, extra = divmod(size := len(slist), c := columns)   ; rows += bool(extra)
    if extra and rows < 3 and (columns - extra) > 1:   c -= (columns - extra) // 2
    for r in range(rows):
        print("  ".join(sorted(slist[x*rows+r] for x in range(c) if x*rows+r < size)))


def ts_to_datetime(ts):
    raw = datetime.datetime.fromtimestamp(ts, datetime.timezone.utc)
    return raw.astimezone().isoformat(sep=u" ")


def handle_wyng_error(ctx, p):
    etext  = (p.stdout or "") + "\n" + (p.stderr or "")
    if (rc := p.returncode) == 2:
        errln = [x for x in etext.splitlines() if x.startswith("Error on volumes:")]
        vols  = list(map(str.strip, (errln[0].split(":", maxsplit=1)[-1].split(",")))) if errln else []
        vms   = [y for x,y in wvolqubemap.items() if x in vols]
        ctx.err_domains.extend(vms)
        err_out(etext if debug else "\n".join(errln))
    elif rc:
        x_it(rc, etext.strip())


def run(cmd, check=True, capt=True, **kwargs):
    capt   = capt and not ("stderr" in kwargs or "stdout" in kwargs)
    if debug:   print(cmd)
    result = subprocess.run(cmd, capture_output=capt, check=False, text=True, **kwargs)
    if check and result.returncode:
        text = f"Error code {result.returncode}" \
             + (f"\n{result.stdout}\n{result.stderr}" if capt else "")
        raise RuntimeError(text)
    return result


# Parse command args / options
def parse_options(args, pdefs):
    global debug

    parser_defs_d = {x[0]: y for x, y in pdefs}
    parser = argparse.ArgumentParser(description="")

    for x, y in pdefs:  parser.add_argument(*x, **y)
    options = parser.parse_args(args)
    options.action = options.action.lower()
    options.unattended = __name__ != "__main__" or not sys.stdin.isatty() or options.unattended

    debug = options.debug

    w_options = [wyngcmd]
    if options.dest:
        w_options.append("--dest="+options.dest)
    if options.meta_dir:   w_options.append("--meta-dir="+options.meta_dir)
    if options.unattended: w_options.append("-u")
    if options.authmin:    w_options.append("--authmin="+options.authmin)
    if options.all and options.action not in ("list","prune"):
        x_it(1, "--all may only be used with list or prune.")
    w_options.extend(["--"+x for x in options.wyngopt])

    return options, w_options


##  MAIN ACTIONS  ##

def _do_create(ctx, passphrase=None):
    if not ctx.options.dest:
        x_it(1, "Dest URL is required to create an archive.")

    wyng_cmd = ctx.w_options[:]    ; run_opts = {"env": os.environ.copy()}
    if passphrase:
        assert type(passphrase) is str
        wyng_cmd.append("--passcmd=echo $WYNGPASS")
        run_opts["env"]["WYNGPASS"] = passphrase

    p = run(wyng_cmd + ["arch-init"], stdout=sys.stdout, stderr=sys.stderr, **run_opts)

    if p.returncode:
        handle_wyng_error(ctx, p)


def _do_backup(ctx, selected=None):

    arch_mdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
       qube_wvolmap, q_wpriv_wrootmap = ctx.mappings

    w_options = ctx.w_options[:]    ; options = ctx.options    ; live_qubes = ctx.qadmin.domains
    includes  = [x.name for x in live_qubes if x.include_in_backups and options.includes
                 and x.name not in options.exclude]
    to_backup = sorted(set(selected+includes))
    pool_vols = {}

    print("\nSelected for backup:\n", ", ".join(to_backup), "\n", flush=True)
    for vmname in to_backup:
        if vmname == "dom0" or vmname not in live_qubes:
            print(" Skipping", vmname)    ; continue

        vm = live_qubes[vmname]
        if vm.klass == "DispVM":   continue

        for ii in ("private","root"):
            if ii == "root" and vm.klass not in ("TemplateVM","StandaloneVM"):   continue

            # Determine if local lvm vol only exists as reflink in archive (or vice versa)
            # and inform Wyng these are the same volume (enable auto-renaming).
            vn, ptype = get_vm_volname(vm, ii)
            vn2 = convert_volname(vn, ptype, vm.klass == "TemplateVM", invert=True)[0]
            vn3 = vn2 if vn not in wvolumemap and vn2 in wvolumemap \
                      and not options.no_auto_rename else vn
            # Create a dict of {pool.pathname: [volnames]}
            pool_vols.setdefault("/".join(ctx.qpools_d[vm.volumes[ii].pool].path),
                                 []).append((vn3, vn))

    if not pool_vols:   x_it(1, "Please supply a list of Qubes VMs to backup.")

    # Copy the Qubes metadata to a .tar
    os.chdir(qubesvar)
    run("find . -name '*.xml' | tar -czf " +ctx.tarpath+ " --verbatim-files-from -T -", shell=True)

    # Start Wyng backup with selected VM volumes and import of the metadata tar
    json.dump(pool_vols, open(jsontmp := ctx.tmpdir+"/wuq_vols.lst", "w"))

    w_options.extend(["--local-from=" + jsontmp, "--tag=qubes", "--send-unchanged"])
    if options.autoprune:  w_options.append("--autoprune="+options.autoprune)
    if options.dedup:      w_options.append("-d")
    wyng_cmd = w_options + [f"--import-other-from={mvolname}:|:{ctx.tarpath}", "send"]

    p = run(wyng_cmd, stdout=sys.stdout, stderr=sys.stderr)

    if p.returncode:
        handle_wyng_error(ctx, p)

    # Set each VM's backup_timestamp
    ts = int(time.time())
    for vmname in (x for x in to_backup if x in live_qubes
                    and x != "dom0" and x not in ctx.err_domains):
        try:
            vm = live_qubes[vmname]
        except:
            if debug:   print("Skip timestamp:", vmname)
            continue
        vm.backup_timestamp = ts


def _do_restore(ctx, selected=None, session=None):

    arch_mdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
       qube_wvolmap, q_wpriv_wrootmap = ctx.mappings

    w_options = ctx.w_options[:]    ; options = ctx.options    ; live_qubes = ctx.qadmin.domains
    err_domains = ctx.err_domains

    if not (session := session or options.session):
        if not selected:
            x_it(1, "Please specify either a --session or qube names to restore.")

        # Check that there aren't multiple most-recent sessions for selected VMs:
        if len(s := set((sorted(y)[-1] for x,y in qube_wvolmap.items() if x in selected))) != 1:
            x_it(1, "Ambiguous VM session selection. Please use --session to choose a date-time.")

        session = list(s)[0]

    elif session not in wvolumemap[mvolname]:
        x_it(1, "No sessions match.")

    # Match VM selections to backed-up volumes
    backups   = ctx.get_qubes_metadata(session)   ; opref = options.pref
    dispvms   = {x.name for x in backups.values() if x.klass=="DispVM"}
    available = ((set(backups) - {"dom0"}) & wsessionqubes[session]) | dispvms
    templates = [x.name for x in backups.values() if x.klass=="TemplateVM" and x.name in available]
    appvms    = [x.name for x in backups.values() if x.klass!="DispVM" and x.name in available
                 and x.name not in templates]

    if selected:
        notmatched = set(selected) - available    ; err_domains.extend(list(notmatched))
        selected   = set(selected) & available
    else:
        notmatched = None
        selected   = available - ({} if options.include_disposable=="on" else dispvms) \
                   - set(options.exclude)

    # Re-order selection list for templates first and dispvms last
    selected     = [x for x in (templates+appvms+sorted(dispvms)) if x in selected]

    print(f"\nVMs matched in session {session}:\n", ", ".join(selected) or "(none)")
    if notmatched:
        print(f"\nNot matched:\n", ", ".join(sorted(notmatched)))

    pref_excludes = [x[:-3] for x in opref if len(x)>4 and x.endswith("::x")]
    # pref_subst    = {x[:-3]: None for x in opref if len(x)>4 and x.endswith("::n")} \
    # + {y[0]: y[2] for x in opref if len(y := x.split("::", maxsplit=2))==3 and y[1]=="s"}

    os.chdir(ctx.tmpdir)    ; pool_vols = {}

    for target in selected:
        qube = backups[target]

        # Find local qube or create one
        if target in live_qubes:
            vm = live_qubes[target]
            if not vm.is_halted():   vm.kill()
            if vm.klass != qube.klass:
                vm.tags.add("backup-restore-in-progress")
                try:
                    del(live_qubes[vm.name])
                except:
                    err_out("Class mismatch %s vs %s for qube named '%s'."
                            % (vm.klass, qube.klass, qube.name))
                    err_domains.append(qube.name)
                    continue
            setattr(vm, "label", qube.label)
        else:
            vm = ctx.qadmin.add_new_vm(qube.klass, label=qube.label, name=target,
                                       pool=options.pool)
            vm.tags.add("backup-restore-in-progress")

        if vm.klass == "DispVM":   continue

        for ii in ("private","root"):
            if ii == "root" and vm.klass not in ("TemplateVM","StandaloneVM"):   continue
            if not q_wpriv_wrootmap[target][session].get(ii):
                err_out(f"Error: No {ii} volume available for {vm.klass} '{target}'.")
                err_domains.append(target)    ; continue
            # Create a dict of {pool.pathname: [(volname, alias), ...]}
            pool_vols.setdefault("/".join(ctx.qpools_d[vm.volumes[ii].pool].path), []).append(
                                 (q_wpriv_wrootmap[target][session][ii],
                                  get_vm_volname(live_qubes[target], ii)[0])  )

    if any((x.properties.get("template_for_dispvms") in {"True"} for x in backups.values()
            if x.name in selected)):
        print("Warning:  DispVMs based on restored disp. templates will be shut down.")
    if not options.unattended:
        print("Warning:  Restoring to existing VMs will overwrite them.")
        if input("Continue [y/N]? ").lower() not in ("y","yes"):   sys.exit(0)

    # Restore data volumes
    print("\nRestoring VM data volumes:", flush=True)
    json.dump(pool_vols, open(jsontmp := ctx.tmpdir+"/wuq_vols.lst", "w"))
    if debug:   print("JSON:\n", json.dumps(pool_vols))
    if options.verbose or not options.unattended:   w_options.append("--verbose")
    wyng_cmd = w_options + ["--force", "--sparse-write", "--local-from="+jsontmp,
                "--session="+session, "receive"]
    p = run(wyng_cmd, check=False, stdout=sys.stdout, stderr=sys.stderr)
    if p.returncode:   handle_wyng_error(ctx, p)
    # elif p.returncode > 0:
    #     raise subprocess.CalledProcessError(p.returncode, p.stderr)

    # Selectively restore qube properties
    # Remove or reset properties that are not in the backup metadata
    print("\nRestoring VM settings:")
    for target in selected:
        print(" "+target, flush=True)
        qube = backups[target]    ; vm = live_qubes[target]
        vm.tags.add("backup-restore-in-progress")
        subdir = "vm-templates/" if qube.klass == "TemplateVM" else "appvms/"

        # Shutdown relevant vms, incl dvms that are based on dvm template
        if not vm.is_halted():   vm.shutdown(force=True)
        for dvm in (x for x in live_qubes.values() if x.klass=="DispVM" and not x.is_halted
                   and qube.properties.get("template_for_dispvms") and x.template == qube.name):
            dvm.shutdown(force=True)

        # Restore nested xml (firewall) files
        if exists(subdir+qube.name+"/"+fwfile):
            shutil.copyfile(subdir+qube.name+"/"+fwfile, qubesvar+subdir+target+"/"+fwfile)
        elif exists(qubesvar+subdir+target+"/"+fwfile):
            os.remove(qubesvar+subdir+target+"/"+fwfile)

        for prop in set(qube.properties) | set(vm.property_list()):
            if prop in ("dispid","installed_by_rpm","default_dispvm","qid","uuid","xid","klass",
                        "label","name","backup_timestamp","ip","ip6","stubdom_mem","stubdom_xid") \
                        + tuple(pref_excludes):
                continue

            if prop == "template":
                if debug:   print(prop,"=", qube.template)
                try:
                    if vm.template != qube.template:  setattr(vm, prop, qube.template)
                except Exception as err:
                    print("Error setting %s.%s to %s: %s" % (qube.name, prop, qube.template, err))
                    err_domains.append(qube.name)
            elif prop in qube.properties:
                pval = qube.properties[prop]
                if debug:   print(prop,"=", pval)
                try:
                    if pval != getattr(vm, prop):  setattr(vm, prop, pval)
                except Exception as err:
                    print("Error setting %s.%s to %s: %s" % (qube.name, prop, pval, err))
                    err_domains.append(qube.name)
            else:
                #propdef = vm.property_get_default(prop)
                try:
                    if not vm.property_is_default(prop):
                        if debug:   print(prop, "- Reset to default")
                        delattr(vm, prop)
                    else:
                        if debug:   print(prop, "- Skip default")

                except Exception as err:
                    err_out(f"Cannot process '{prop}' default:\n{repr(err)}")
                    err_domains.append(qube.name)

        for prop, pval in qube.features.items():
            if debug:   print("feature:", prop, "=", pval)
            try:
                vm.features[prop] = pval
            except Exception as err:
                print("Error setting feature %s.%s to %s: %s" % (qube.name, prop, pval, err))
                err_domains.append(qube.name)
        for prop in (x for x in vm.features if x not in qube.features):
            if debug:   print("del feature:", prop)
            try:
                del(vm.features[prop])
            except Exception as err:
                print("Error removing feature %s.%s: %s" % (qube.name, prop, err))
                err_domains.append(qube.name)

        for bus in vm.devices:
            busobj  = vm.devices[bus]
            devlist = list(busobj.assignments())
            for dev in devlist:   busobj.detach(dev)
        for bus in qube.devices:
            for backend_domain, ident in qube.devices[bus]:
                options = qube.devices[bus][(backend_domain, ident)]
                assignment = qubesadmin.devices.DeviceAssignment(backend_domain=backend_domain,
                                                    ident=ident, options=options, persistent=True)
                try:
                    vm.devices[bus].attach(assignment)
                except Exception as err:
                    print("Error attaching device %s:%s to %s: %s" % (bus,ident,qube.name,err))
                    err_domains.append(qube.name)

        for tag in qube.tags:
            try:
                vm.tags.add(tag)
            except Exception as err:
                print("Error adding tag %s.%s: %s" % (qube.name, tag, err))
                err_domains.append(qube.name)
        for tag in (x for x in vm.tags if x not in qube.tags):
            try:
                vm.tags.remove(tag)
            except Exception as err:
                print("Error removing tag %s.%s: %s" % (qube.name, tag, err))
                err_domains.append(qube.name)

        if vm.klass in ("TemplateVM","StandaloneVM"):
            print(" Running qvm-sync-appmenus for", vm.name)
            try:
                vm.start(); run(["sudo", "-u", "#1000", "qvm-sync-appmenus", vm.name], check=False)
                vm.shutdown()
            except:
                pass
        run(["sudo", "-u", "#1000", "qvm-appmenus", "--update", vm.name], check=False)

        if "backup-restore-in-progress" in vm.tags and target not in err_domains:
            vm.tags.remove("backup-restore-in-progress")


def _do_verify(ctx, selected=None, session=None):

    arch_mdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
       qube_wvolmap, q_wpriv_wrootmap = ctx.mappings

    w_options = ctx.w_options[:]    ; options = ctx.options

    if not (session := session or options.session):
        if not selected:
            x_it(1, "Please specify either a --session or qube names to restore.")

        # Check that there aren't multiple most-recent sessions for selected VMs:
        if len(s := set((sorted(y)[-1] for x,y in qube_wvolmap.items() if x in selected))) != 1:
            x_it(1, "Ambiguous VM session selection. Please use --session to choose a date-time.")

        session = list(s)[0]

    elif session not in wvolumemap[mvolname]:
        x_it(1, "No sessions match.")

    # Match VM selections to backed-up volumes
    backups   = ctx.get_qubes_metadata(session)
    dispvms   = {x.name for x in backups.values() if x.klass=="DispVM"}
    available = ((set(backups) - {"dom0"}) & wsessionqubes[session]) | dispvms

    if selected:
        notmatched = set(selected) - available    ; ctx.err_domains.extend(list(notmatched))
        selected   = set(selected) & available
    else:
        notmatched = None
        selected   = available - ({} if options.include_disposable=="on" else dispvms) \
                   - set(options.exclude)

    print(f"\nVMs matched in session {session}:\n",
          ", ".join(sorted(selected)) or "(none)", "\n", flush=True)
    if notmatched:
        print(f"\nNot matched:\n", ", ".join(sorted(notmatched)))
    if not selected:   x_it(1, "")

    lvolumes = [vol for vm,ses_d in qube_wvolmap.items()
                        for ses,vlst in ses_d.items() for vol in vlst
                        if vm in selected and ses==session]

    if options.verbose or not options.unattended:   w_options.append("--verbose")
    wyng_cmd = w_options + ["--session="+session, "verify"] + lvolumes
    p = run(wyng_cmd, check=False, stdout=sys.stdout, stderr=sys.stderr)
    if p.returncode:   handle_wyng_error(ctx, p)

    for vm in selected:
        if vm not in backups.keys():
            err_out(f"No settings metadata for qube {vm}.")    ; ctx.err_domains.append(vm)


def _do_prune(ctx, selected=None, session=None):

    arch_mdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
       qube_wvolmap, q_wpriv_wrootmap = ctx.mappings

    w_options = ctx.w_options[:]    ; options = ctx.options

    if not (session := session or options.session) and not options.autoprune:
        x_it(1, "Please specify a session, an autoprune mode or both.")

    lvolumes = { vol for vm, ses_d in qube_wvolmap.items()
                        for ses, vlst in ses_d.items()
                            for vol in vlst if vm in selected }

    if session: w_options.append("--session="+session)
    if options.all: w_options.append("--all")
    if options.all_before: w_options.append("--all-before")
    if options.autoprune: w_options.append("--autoprune="+options.autoprune)

    wyng_cmd = w_options + ["prune"] + list(lvolumes)
    run(wyng_cmd, stdout=sys.stdout, stderr=sys.stderr)


def _do_delete(ctx, selected):

    arch_mdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
       qube_wvolmap, q_wpriv_wrootmap = ctx.mappings

    w_options = ctx.w_options[:]    ; options = ctx.options

    if not len(selected) == 1:
        x_it(1, "Please specify a single qube name to delete.")

    lvolumes = { vol for vm, ses_d in qube_wvolmap.items()
                        for ses, vlst in ses_d.items()
                            for vol in vlst if vm in selected }

    if not options.unattended:
        print("Warning:  Data cannot be recovered after deleting it from the archive.")
        if input("Continue [y/N]? ").lower() not in ("y","yes"):   sys.exit(0)

    for vol in lvolumes:
        wyng_cmd = w_options + ["-u", "--verbose" if options.verbose else "--quiet",
                                "delete", vol]
        try:
            run(wyng_cmd, stdout=sys.stdout, stderr=sys.stderr)
        except Exception as e:
            ctx.err_domains.append(wvolqubemap[vol])


def show_list(ctx, selected=None, session=None):

    arch_mdata, wvolsessionmap, wvolumemap, wvolqubemap, wsessionqubes, wsessiontags, \
       qube_wvolmap, q_wpriv_wrootmap = ctx.mappings

    options = ctx.options    ; selected = selected or ctx.selected
    session = session or options.session

    print("\nURL", arch_mdata["url"])
    arch_time = ts_to_datetime(float(arch_mdata["updated_at"]))
    print("Last updated %s (%s)" % (arch_time[:-6], arch_time[-6:]))
    if (encrypted := arch_mdata.get("encrypted")) is not None:
        print("Encryption:", ("On" if encrypted == True else "OFF")
              + (", Authenticated" if arch_mdata["is_auth"] == True else ""), flush=True)


    if options.all:   selected = list(qube_wvolmap)

    if options.pool_info:
        print_pools()

    elif session:
        if session not in wsessionqubes:
            x_it(1, f"No match for session {session}.")

        backups  = ctx.get_qubes_metadata(session)    ; tags = {}
        dispvms  = {x.name for x in backups.values() if x.klass=="DispVM"}
        print("\nVMs in session", session+":")
        for qube in sorted((wsessionqubes[session] & set(backups)) | dispvms):
            print(" ", qube, "(D)" if qube in dispvms else "")

        if (tags := dict(wsessiontags.get(session).items() - {("qubes","")})):
            print("\nTags in session:")
            for tk, tv in tags.items():
                print(f'  {tk.ljust(12)} - {tv}')

        if options.verbose:
            print("\nVMs referenced in this qubes.xml:")
            for vm in backups.values():   print(f"  {vm.name} ({vm.klass})")

    elif selected:
        for qube, seslist in qube_wvolmap.items():
            xml_seslist = [x for x in seslist if mvolname in wvolsessionmap[x]
                                              and qube in selected]
            if not xml_seslist:   continue
            print(f"\n{qube}:")
            if options.unattended:
                for ses in sorted(xml_seslist):   print(ses)
            else:
                list_sessions(xml_seslist)

    else:
        print("\n* Archived Qubes VMs *")
        print("\nLatest:           VM Name:")
        for qube, seslist in qube_wvolmap.items():
            xml_seslist = [x for x in seslist if mvolname in wvolsessionmap[x]]
            if not xml_seslist:   continue
            print(sorted(xml_seslist)[-1], " ", qube)

    print()


##  API for wyng-util-qubes: Wyng backup system on Qubes OS  ##

#   Instantiate WyngQubesContext() with a sys.argv style list of wyng-util-qubes options.
#   For example: util = WyngQubesContext(["list", "--dest=qubes://sys-usb/mnt/backup/laptop.wbak"])
#   The object will have a set of metadata mappings available, starting with 'arch_mdata', a basic
#   heirarchical dir of the Wyng archive. See 'get_wyng_directory()' function for details.
#   Available Wyng functions from this class are: create*, backup, restore, verify, prune, delete.
#   Currently, a new instance is required for each call and the arg 'action' is ignored except
#   for 'create' which is required to create a new archive.

class WyngQubesContext:

    def __init__(self, util_args, stdin=None, passphrase=None):

        self.tmpdir_obj = tempfile.TemporaryDirectory(dir="/tmp", prefix="wuq")
        self.tmpdir     = tmpdir = self.tmpdir_obj.name

        self.tarpath    = self.tmpdir+"/qmeta.tgz"

        self.options, self.w_options = parse_options(util_args, parser_defs)

        self.action,  self.selected  = self.options.action, self.options.qubenames
        self.err_domains= []

        if self.action == "create":
            _do_create(self, passphrase)    ; self.close()    ; return

        self.qadmin     = qadmin = qubesadmin.Qubes().app
        self.qpools_d   = get_pools(qadmin)

        self.mappings   = get_wyng_directory(self, stdin=stdin, passphrase=passphrase)
        for x,y in zip(("arch_mdata","wvolsessionmap","wvolumemap","wvolqubemap","wsessionqubes",
                        "wsessiontags","qube_wvolmap","q_wpriv_wrootmap"), self.mappings):
            setattr(self, x, y)

    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):   self.close()

    def get_qubes_metadata(self, session):
        # Receive metadata
        wyng_cmd = self.w_options + ["-u", "--quiet", "--save-to="+self.tarpath,
                                    "--session="+session, "receive", mvolname]
        result = run(wyng_cmd, check=True)

        tar_cmd = ["tar", "-xzf", self.tarpath]
        result = run(tar_cmd, cwd=self.tmpdir, check=True)

        return Core3Qubes(self.tmpdir+"/"+qubesxml).domains

    def backup(self, vms=None):
        res = _do_backup(self, vms or self.selected)   ; self.close()
        return res

    def restore(self, session=None, vms=None):
        res = _do_restore(self, vms or self.selected)   ; self.close()
        return res

    def verify(self, session=None, vms=None):
        res = _do_verify(self, vms or self.selected)   ; self.close()
        return res

    def prune(self, session=None, vms=None):
        res = _do_prune(self, vms or self.selected)   ; self.close()
        return res

    def delete(self, vms=None):
        res = _do_delete(self, vms or self.selected)   ; self.close()
        return res

    def close(self):
        self.backup = self.restore = self.verify = self.prune = self.delete = None
        self.tmpdir_obj.cleanup()
        #if not debug:   shutil.rmtree(self.tmpdir, ignore_errors=True)


##  MAIN  ##

if sys.hexversion < 0x3080000:
    x_it(1, "Python ver. 3.8 or greater required.")

# Root user required
if os.getuid() > 0:
    x_it(1, "Must be root user.")


# Parse Arguments

parser_defs = [
 [["action"],         {"choices": ["create","backup","restore","verify","prune","delete","list"],
                       "help": "Action to take"}],
 [["--dest"],         {"help": "URL location of archive."}],
 [["--authmin"],      {"help": "Minutes to remember authentication."}],
 [["--session"],      {"help": "YYYYMMDD-HHMMSS[,YYYYMMDD-HHMMSS]"
                                 " select session date, singular or range."}],
 [["--dedup", "-d"],  {"action": "store_true", "default": False,
                       "help": "Data deduplication. (backup)"}],
 [["--includes", "-i"], {"action": "store_true", "default": False,
                         "help": "Select VMs marked 'include in backups' (backup)"}],
 [["--exclude"],      {"action": "append", "default": [],
                       "help": "VM name to exclude. (backup)"}],
 [["--autoprune"],    {"help": "Automatic pruning: off/on/full. (backup, prune)"}],
 [["--all-before"],   {"action": "store_true", "default": False,
                       "help": "Select all sessions before --session date-time."}],
 [["--all"],          {"action": "store_true", "default": False,
                       "help": "List all VMs and sessions"}],
 [["--pref"],         {"action": "append", "default": [],
                       "help": "VM pref setting control. (restore)"}],
 [["--pool-info"],    {"action": "store_true", "default": False,
                       "help": "Show local disk storage (list)"}],
 [["--pool", "-p"],   {"help": "Specify Qubes storage pool for creating VMs (restore)."}],
 [["--wyngopt","-w"], {"action": "append", "default": [],
                       "help": "Pass an option to Wyng directly."}],
 [["--no-auto-rename"], {"action": "store_true", "default": False,
                       "help": "Don't rename archived volumes for LVM or Reflink (backup)"}],
 [["--include-disposable"], {"choices": ("off","on"), "default": "off",
                       "help": "Include disposable VMs (restore, list)"}],
 [["--unattended", "-u"], {"action": "store_true", "help": "Unattended operation"}],
 [["--verbose"],      {"action": "store_true", "help": "Show more status info"}],
 [["--debug"],        {"action": "store_true", "help": "Show debug info"}],
 [["--meta-dir"],     {"help": "Use alternate metadata path."}],
 [["qubenames"],      {"nargs": "*"}]
]


##  CONSTANTS / GLOBALS  ##

columns    = max(4, min(10, shutil.get_terminal_size().columns // 17))
thispath   = os.path.dirname(__file__) ; mvolname   = "wyng-qubes-metadata"
wyngcmd    = thispath+"/wyng" if exists(thispath+"/wyng") else "wyng"
qubesvar   = "/var/lib/qubes/"         ; qubesxml   = "qubes.xml"    ; fwfile = "firewall.xml"
pooltypes  = ("file-reflink","lvm_thin")


##  RUN MAIN  ##

if __name__ == "__main__":

    print(_program, flush=True)     ; debug = "--debug" in sys.argv

    with WyngQubesContext(sys.argv[1:], stdin=sys.stdin) as wq_context:
        action = wq_context.action    ; options = wq_context.options
        if action == "create":   x_it(0)

        if not wq_context.wvolumemap.get(mvolname) and action not in ("create","backup"):
            x_it(1, "No Qubes backup sessions.")

        if action == "backup":
            wq_context.backup()
        elif action == "restore":
            wq_context.restore()
        elif action == "verify":
            wq_context.verify()
        elif action == "prune":
            wq_context.prune()
        elif action == "delete":
            wq_context.delete()
        elif action == "list":
            show_list(wq_context)


    ##  CLEAN UP  ##
    if (errs := wq_context.err_domains):
        x_it(2, "\nErrors for VMs: "+", ".join(sorted(set(errs))))

    if action != "list":   print("\nDone.")

    x_it(0)
